1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "dynamic-mock-server.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "dynamic-mock-server.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "dynamic-mock-server.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "dynamic-mock-server.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Access the Swagger UI at:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}/api-docs
  {{- end }}
{{- end }}
{{- else }}
  http://localhost:8080/api-docs (when port-forwarding)
{{- end }}

3. Check application health:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}/api/health
  {{- end }}
{{- end }}
{{- else }}
  http://localhost:8080/api/health (when port-forwarding)
{{- end }}

4. Monitor metrics (if Prometheus is enabled):
{{- if .Values.serviceMonitor.enabled }}
  Metrics are being scraped by Prometheus ServiceMonitor at /metrics endpoint
{{- else }}
  Access metrics directly at:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}:{{ $.Values.service.metricsPort }}/metrics
  {{- end }}
{{- end }}
{{- else }}
  http://localhost:9464/metrics (when port-forwarding metrics port)
{{- end }}
{{- end }}

5. Configuration:
  - Database Type: {{ .Values.config.database.type }}
  {{- if eq .Values.config.database.type "mongodb" }}
  - MongoDB Database: {{ .Values.config.database.mongodb.database }}
  {{- end }}
  {{- if eq .Values.config.database.type "postgresql" }}
  - PostgreSQL Database: {{ .Values.config.database.postgresql.database }}
  {{- end }}
  - OpenTelemetry: {{ .Values.config.opentelemetry.enabled }}
  - Prometheus Metrics: {{ .Values.config.opentelemetry.prometheusEnabled }}

6. Scaling:
{{- if .Values.autoscaling.enabled }}
  - HPA is enabled with {{ .Values.autoscaling.minReplicas }}-{{ .Values.autoscaling.maxReplicas }} replicas
  - CPU target: {{ .Values.autoscaling.targetCPUUtilizationPercentage }}%
  - Memory target: {{ .Values.autoscaling.targetMemoryUtilizationPercentage }}%
{{- else }}
  - Fixed replicas: {{ .Values.replicaCount }}
  - To enable autoscaling: --set autoscaling.enabled=true
{{- end }}

7. Useful commands:
  # View logs
  kubectl logs -f deployment/{{ include "dynamic-mock-server.fullname" . }} -n {{ .Release.Namespace }}
  
  # Scale manually (if autoscaling is disabled)
  kubectl scale deployment {{ include "dynamic-mock-server.fullname" . }} --replicas=3 -n {{ .Release.Namespace }}
  
  # Update configuration
  helm upgrade {{ .Release.Name }} ./helm/dynamic-mock-server --set config.database.type=postgresql -n {{ .Release.Namespace }}

For more information, visit: https://github.com/rapidcoderx/dynamic-mock-server
