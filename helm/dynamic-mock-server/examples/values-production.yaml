# Production values for dynamic-mock-server
# This is a YAML-formatted file for production deployment

replicaCount: 3

image:
  repository: rapidcoderx/dynamic-mock-server
  pullPolicy: IfNotPresent
  tag: "1.0.0"

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 70

# Database configuration
config:
  database:
    type: "postgresql"
    postgresql:
      host: "postgresql-ha"
      port: 5432
      database: "dynamic_mock_server"
      username: "postgres"
      password: "your-secure-password"
      ssl: true
  
  # OpenTelemetry configuration
  opentelemetry:
    enabled: true
    serviceName: "dynamic-mock-server"
    prometheusEnabled: true
    
  # Security configuration
  security:
    cors:
      enabled: true
      origin: "https://your-domain.com"
    helmet:
      enabled: true
    rateLimit:
      enabled: true
      windowMs: 900000 # 15 minutes
      max: 1000 # Higher limit for production

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/tls-acme: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
  hosts:
    - host: api.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: dynamic-mock-server-tls
      hosts:
        - api.yourdomain.com

# Persistence
persistence:
  enabled: true
  accessMode: ReadWriteOnce
  size: 10Gi
  storageClass: "fast-ssd"

# Monitoring
serviceMonitor:
  enabled: true
  namespace: "monitoring"
  labels:
    app: dynamic-mock-server
  interval: 30s
  path: /metrics

# Security
networkPolicy:
  enabled: true
  ingress:
    enabled: true
    from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      - namespaceSelector:
          matchLabels:
            name: monitoring
  egress:
    enabled: true
    to:
      - namespaceSelector:
          matchLabels:
            name: database
      - namespaceSelector: {}
        podSelector:
          matchLabels:
            app: postgresql

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 2000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

# Node placement
nodeSelector:
  kubernetes.io/os: linux
  node-role.kubernetes.io/worker: "true"

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - dynamic-mock-server
        topologyKey: kubernetes.io/hostname

tolerations:
  - key: "dedicated"
    operator: "Equal"
    value: "api-services"
    effect: "NoSchedule"
